function __ebcd {
    if [[ $1 != '' ]] ; then
        _e_to_pwd=$1
    else
        _e_to_pwd=$_e_old_pwd
    fi

    export _e_old_pwd=$(pwd)
    cd $_e_to_pwd
}

function __emkcd {
    mkdir $1 && __ebcd $1
}

function hr {
    _e_i=$(tput cols)
    while (( $((_e_i--)) > 0 )) ; do
        echo -n '-'
    done
}

function colors256 {

	for fgbg in 38 48 ; do #Foreground/Background
		for color in {0..256} ; do #Colors
			#Display the color
			echo -en "\e[${fgbg};5;${color}m ${color}\t\e[0m"
			#Display 10 colors per lines
			if [ $((($color + 1) % 10)) == 0 ] ; then
				echo #New line
			fi
		done
		echo #New line
	done

}

function colors16 {

	for clbg in {40..47} {100..107} 49 ; do
		#Foreground
		for clfg in {30..37} {90..97} 39 ; do
			#Formatting
			for attr in 0 1 2 4 5 7 ; do
				#Print the result
				echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
			done
			echo #Newline
		done
	done

}

function create_prompt {

    gitpart=""

	if [[ $GIT_PROMPT -eq 1 ]]; then

	    if git ls-files ./ --error-unmatch >/dev/null 2>/dev/null ; then

		toplevel="$(git rev-parse --show-toplevel)"
		stash=$(git stash list | wc -l)
		git_status_short=$(git status -s --porcelain)
		stmod=$(echo -e "$git_status_short" | egrep -v "^\?\?"| grep -e "^M"|wc -l)
		mod=$(echo -e "$git_status_short" | egrep -v "^\?\?"| grep -e "^.M"|wc -l)
		add=$(echo -e "$git_status_short" | egrep -v "^\?\?"| grep -e "^A"|wc -l)
		stdel=$(echo -e "$git_status_short" | egrep -v "^\?\?"| grep -e "^D"|wc -l)
		del=$(echo -e "$git_status_short" | egrep -v "^\?\?"| grep -e "^.D"|wc -l)
		unt=$(echo -e "$git_status_short" | egrep "^\?\?" |wc -l)
		unm=$(echo -e "$git_status_short" | egrep -v "^\?\?"| grep -e "^UU"|wc -l)
		ren=$(echo -e "$git_status_short" | egrep -v "^\?\?"| grep -e "^R"|wc -l)
		ren=$(echo -e "$git_status_short" | egrep -v "^\?\?"| grep -e "^R"|wc -l)
		remote=$(git remote -v)
		git_status=$(git status | grep -A1 -e "Your branch")
		local_branch=$(git branch | grep -e "^\*"| cut -d' ' -f2-)
		git_submodule=$(cd $toplevel && git submodule status 2>/dev/null)
		submodules=$(echo -e "$git_submodule" |egrep -v "^$"| wc -l)
		submodules_changed=$(echo -e "$git_submodule" |egrep -v "^$"|egrep "^\+"| wc -l)

		if echo $git_status | grep 'ahead' > /dev/null ; then

			remote_name=$(echo $git_status | sed -n "s~.*'\([^/]\+\)/\S\+'\s.*~\1~p")
			remote_branch=$(echo $git_status | sed -n "s~.*'[^/]\+/\(\S\+\)'\s.*~\1~p")
			num=$(echo $git_status | sed -n "s~.*'\S\+'\sby\s\([0-9]\+\)\scommit.*~\1~p")
			remote_full_name=$(echo $remote | grep $remote_name | grep "(push)" | awk '{print $2}')
			rstat="${AZURE}$local_branch${HYELOW}-${HRED}$num${HYELOW}->${AZURE}$remote_full_name~$remote_branch$GREEN"

		elif echo $git_status | grep 'behind' > /dev/null ; then

                        remote_name=$(echo $git_status | sed -n "s~.*'\([^/]\+\)/\S\+'\s.*~\1~p")
                        remote_branch=$(echo $git_status | sed -n "s~.*'[^/]\+/\(\S\+\)'\s.*~\1~p")
                        num=$(echo $git_status | sed -n "s~.*'\S\+'\sby\s\([0-9]\+\)\scommit.*~\1~p")
                        remote_full_name=$(echo $remote | grep $remote_name | grep "(fetch)" | awk '{print $2}')
                        rstat="${AZURE}$local_branch${HYELOW}<-${HRED}$num${HYELOW}-${AZURE}$remote_full_name~$remote_branch$GREEN"

		elif echo $git_status | grep 'different commits' > /dev/null ; then

                        remote_name=$(echo $git_status | sed -n "s~.*'\([^/]\+\)/\S\+'\s.*~\1~p")
                        remote_branch=$(echo $git_status | sed -n "s~.*'[^/]\+/\(\S\+\)'\s.*~\1~p")
                        num=$(echo $git_status | sed -n "s~.*and\shave\s\([0-9]\+\)\sand.*~\1~p")
			num2=$(echo $git_status | sed -n "s~.*and\shave\s[0-9]\+\sand\s\([0-9]\+\)\sdifferent.*~\1~p")
                        remote_full_name=$(echo $remote | grep $remote_name | grep "(fetch)" | awk '{print $2}')
                        rstat="${AZURE}$local_branch${HYELOW}<-${HRED}$num${HYELOW}/${HRED}$num2${HYELOW}->${AZURE}$remote_full_name~$remote_branch$GREEN"

		else

		    	rstat="$AZURE$local_branch$GREEN"

		fi

		if [ $mod -gt 0 ] ; then 
		    mod="$RED$mod$GREEN"
		else
		    mod="$NOC$mod$GREEN"
		fi

		if [ $stmod -gt 0 ] ; then
                    mod="$mod$BLUE/$GREEN$stmod$GREEN"
                fi

		if [ $add -gt 0 ] ; then 
		    add="$HGREEN$add$GREEN"
		else
		    add="$NOC$add$DARK$GREEN"
		fi

		if [ $del -gt 0 ] ; then 
		    del="$RED$del$GREEN"
		else
		    del="$NOC$del$GREEN"
		fi

                if [ $stdel -gt 0 ] ; then
                    del="$del$BLUE/$GREEN$stdel$GREEN"
                fi

                if [ $unt -gt 0 ] ; then
                    unt="$RED$unt$GREEN"
                else
                    unt="$NOC$unt$GREEN"
                fi

                if [ $unm -gt 0 ] ; then
                    unm=" ${GREEN}UU: $RED$unm$GREEN"
                else
                    unm=""
                fi

		if [ $stash -gt 0 ] ; then 
		    stash=" ${GREEN}S: $RED$stash$GREEN"
		else
		    stash=""
		fi

                if [ $ren -gt 0 ] ; then
                    ren=" ${GREEN}R: $HGREEN$ren$GREEN"
                else
                    ren=""
                fi

                if [ $submodules -gt 0 ] ; then
                    submodules="${GREEN} | SU: $BLUE$submodules$GREEN"
                else
                    submodules=""
                fi

                if [ $submodules_changed -gt 0 ] ; then
                    submodules="$submodules/$HRED$submodules_changed$GREEN"
                fi

		gitpart="\n$GREEN(M: $mod A: $add D: $del U: $unt$unm$ren$stash$GREEN | $rstat$submodules)"

	    fi
    fi

    if [[ "$USER" != "root" ]] ; then 
	    COLORPS=$HRED
    else
	    COLORPS=$GREEN
    fi

    SMAJL="\`if [ \$? = 0 ]; then echo -e '$GREEN:)'; else echo -e '$RED:('; fi\`"
    PS1="$COLORPS\u@\h:$HBLUE\w$gitpart$COLORPS\$ $SMAJL$NOC "

}

function git-prompt-disable {
    export GIT_PROMPT=0
}

function git-prompt-enable {
    export GIT_PROMPT=1
}

function ordir {
    nautilus sftp://$1
}
