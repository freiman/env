function __ebcd {
    if [[ $1 != '' ]] ; then
        _e_to_pwd=$1
    else
        _e_to_pwd=$_e_old_pwd
    fi

    export _e_old_pwd=$(pwd)
    cd $_e_to_pwd
}

function __emkcd {
    mkdir $1 && __ebcd $1
}

function hr {
    _e_i=$(tput cols)
    while (( $((_e_i--)) > 0 )) ; do
        echo -n '-'
    done
}

function colors256 {

	for fgbg in 38 48 ; do #Foreground/Background
		for color in {0..256} ; do #Colors
			#Display the color
			echo -en "\e[${fgbg};5;${color}m ${color}\t\e[0m"
			#Display 10 colors per lines
			if [ $((($color + 1) % 10)) == 0 ] ; then
				echo #New line
			fi
		done
		echo #New line
	done

}

function colors16 {

	for clbg in {40..47} {100..107} 49 ; do
		#Foreground
		for clfg in {30..37} {90..97} 39 ; do
			#Formatting
			for attr in 0 1 2 4 5 7 ; do
				#Print the result
				echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
			done
			echo #Newline
		done
	done

}

function sshp {
	if ! /usr/bin/klist -s &> /dev/null; then
		/usr/bin/kinit -r 7d -fp $USER
	fi
	ssh $1.ls.intra
}

function ssho {
	ssh root@$1.livesport.intra
}

function create_prompt {

	git_part=""

	if [[ $GIT_PROMPT -eq 1 ]] && git rev-parse --git-dir &>/dev/null; then

		declare -A git_counters
		git_counters_part=""
		git_rem_loc_br_part=""
		git_submodules_part=""

		git_toplevel=$(git rev-parse --show-toplevel)
		git_status=$(git status --short --porcelain --branch)
		git_stash_count=$(git stash list | wc --lines)
		git_remote=$(git remote --verbose)
		git_submodule=$(cd $git_toplevel && git submodule status 2>/dev/null)
		git_submodules_count=$(echo -e "$git_submodule" | egrep -v "^$" | wc -l)
		git_submodules_changed_count=$(echo -e "$git_submodule" |egrep -v "^$"|egrep "^\+" | wc -l)

		for type in A MM DD CC RR U TT \?; do

			char=${type:0:1}

			staged=$(echo -e "$git_status" | grep -c "^$char")

			if [ ${#type} -eq 2 ]; then

				unstaged=$(echo -e "$git_status" | grep -c "^.$char")

				if [ $staged -gt 0 -o $unstaged -gt 0 ]; then

					[ $unstaged -eq 0 ] && git_counters[$char]="${git_counters[$char]}$NOC" || git_counters[$char]="${git_counters[$char]}$RED"
					git_counters[$char]="${git_counters[$char]}$unstaged"
					[ $staged -gt 0 ] && git_counters[$char]="${git_counters[$char]}$BLUE/$HGREEN$staged"
					git_counters[$char]="${git_counters[$char]}$GREEN"

				fi
			else

				if [ $staged -gt 0 ]; then

					git_counters[$char]="$NOC$staged$GREEN"

				fi
			fi
		done

		if [ $git_stash_count -gt 0 ]; then

			git_counters[S]="$YELLOW$git_stash_count$GREEN"

		fi

		for part in "${!git_counters[@]}"; do

			[ "$git_counters_part" ] && git_counters_part="$git_counters_part "
			git_counters_part="$git_counters_part$GREEN$part: ${git_counters[$part]}"

		done

		git_status_branch_tmp=$(echo -e "$git_status" | grep "^##")

		if [[ "$git_status_branch_tmp" =~ ^##\ ([a-zA-Z0-9]+)...([a-zA-Z0-9]+)/([a-zA-Z0-9]+)\ ?(\[.*\])?$ ]]; then

			git_local_branch="${BASH_REMATCH[1]}"
			git_remote_name="${BASH_REMATCH[2]}"
			git_remote_branch="${BASH_REMATCH[3]}"
			git_ahead_behind="${BASH_REMATCH[4]}"
			git_ahead_count=""
			git_behind_count=""

			if [ "$git_ahead_behind" ]; then

				if [[ "$git_ahead_behind" =~ ^\[ahead\ ([0-9]+)\]$ ]]; then

					git_ahead_count="${BASH_REMATCH[1]}"

				elif [[ "$git_ahead_behind" =~ ^\[behind\ ([0-9]+)\]$ ]]; then

					git_behind_count="${BASH_REMATCH[1]}"

				elif [[ "$git_ahead_behind" =~ ^\[ahead\ ([0-9]+),\ behind\ ([0-9]+)\]$ ]]; then

					git_ahead_count="${BASH_REMATCH[1]}"
					git_behind_count="${BASH_REMATCH[2]}"

				fi
			fi

			git_remote_long_name=$(echo -e "$git_remote" | egrep "^$git_remote_name\s" | awk '{print $2}' | uniq | head -1)

			if [ "$git_ahead_count" -a "$git_behind_count" ]; then git_ahead_behind_arrow="$HYELLOW<-$HRED$git_behind_count$AZURE/$HRED$git_ahead_count$HYELLOW->$AZURE";
			elif [ "$git_ahead_count" ]; then git_ahead_behind_arrow="$HYELLOW-$HRED$git_ahead_count$HYELLOW->$AZURE";
			elif [ "$git_behind_count" ]; then git_ahead_behind_arrow="$HYELLOW<-$HRED$git_behind_count$HYELLOW-$AZURE";
			else git_ahead_behind_arrow="$HYELLOW=$AZURE";
			fi

			git_rem_loc_br_part="$AZURE$git_local_branch$git_ahead_behind_arrow$git_remote_long_name~$git_remote_branch$GREEN"

		elif [[ "$git_status_branch_tmp" =~ ^##\ HEAD\ \((.*)\)$ ]]; then
			git_rem_loc_br_part="$HRED${BASH_REMATCH[1]}$GREEN"
		fi

		[ $git_submodules_count -gt 0 ] && git_submodules_part="${GREEN} | SU: $BLUE$git_submodules_count$GREEN"
		[ $git_submodules_changed_count -gt 0 ] && git_submodules_part="$git_submodules_part/$HRED$git_submodules_changed_count$GREEN"

		git_part="\n$GREEN("
		[ "$git_counters_part" ] && git_part="$git_part$git_counters_part | "
		git_part="$git_part$git_rem_loc_br_part"
		[ "$git_submodules_part" ] && git_part="$git_part$git_submodules_part"
		git_part="$git_part)"

	fi

	if sudo -n -v &>/dev/null; then COLORPS=$HGREEN; else COLORPS=$HRED; fi
	exit_code_prompt="\`if [ \$? -eq 0 ]; then echo -e '$GREEN\$'; else echo -e '$RED\$'; fi\`"
	PS1="$COLORPS\u@$COLORPS\h:$HBLUE\w$git_part$COLORPS$exit_code_prompt$NOC "

}

function git-prompt-disable {
	export GIT_PROMPT=0
}

function git-prompt-enable {
	export GIT_PROMPT=1
}

function ordir {
	nautilus sftp://$1
}
